security.oauth2.client.clientId= 576752392218-a8qekoalhrv2o221mi1c2d4c54ajnqr4.apps.googleusercontent.com
security.oauth2.client.clientSecret=mtBz_NE6ms3ItxGFC0RRQ59l
security.oauth2.client.accessTokenUri= https://www.googleapis.com/oauth2/v4/token
security.oauth2.client.userAuthorizationUri=https://accounts.google.com/o/oauth2/v2/auth
security.oauth2.client.authenticationScheme=query
security.oauth2.client.clientAuthenticationScheme=form
security.oauth2.client.scope=openid,email,profile


security.oauth2.resource.userInfoUri=https://www.googleapis.com/oauth2/v3/userinfo
security.oauth2.resource.preferTokenInfo=true
# DataSource settings: set here your own configurations for the database
# connection. In this example we have "netgloo_blog" as database name and
# "root" as username and password.
spring.datasource.url = jdbc:mysql://localhost:3306/crypt_friend
spring.datasource.username = root
spring.datasource.password = admin

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.thymeleaf.cache=false
spring.thymeleaf.prefix=file:///C:/Users/fengz/Desktop/crypt_friend/src/main/resources/templates/

bittrex.api.getcurrencies.url=https://bittrex.com/api/v1.1/public/getcurrencies
bittrex.api.getmarkets.url=https://bittrex.com/api/v1.1/public/getmarkets
bittrex.api.gettticker.url=https://bittrex.com/api/v1.1/public/getticker